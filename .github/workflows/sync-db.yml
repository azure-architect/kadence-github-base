name: Database Synchronization

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform (pull, push, backup)"
        required: true
        default: "backup"
        type: choice
        options:
          - pull
          - push
          - backup
      environment:
        description: "Environment (local, staging, production)"
        required: true
        default: "staging"
        type: choice
        options:
          - local
          - staging
          - production
      no_search_replace:
        description: "Skip search and replace operations"
        required: false
        default: false
        type: boolean
      dry_run:
        description: "Show what would be done without making changes"
        required: false
        default: false
        type: boolean

jobs:
  sync-database:
    name: Sync Database
    runs-on: ubuntu-latest

    # Only allow this workflow to run if explicitly triggered
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          extensions: mysqli, zip, mbstring
          tools: wp-cli

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Setup known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Create database sync configuration
        env:
          LOCAL_DB_HOST: ${{ secrets.LOCAL_DB_HOST || 'localhost' }}
          LOCAL_DB_NAME: ${{ secrets.LOCAL_DB_NAME }}
          LOCAL_DB_USER: ${{ secrets.LOCAL_DB_USER }}
          LOCAL_DB_PASS: ${{ secrets.LOCAL_DB_PASS }}
          LOCAL_URL: ${{ secrets.LOCAL_URL }}

          STAGING_DB_HOST: ${{ secrets.STAGING_DB_HOST }}
          STAGING_DB_NAME: ${{ secrets.STAGING_DB_NAME }}
          STAGING_DB_USER: ${{ secrets.STAGING_DB_USER }}
          STAGING_DB_PASS: ${{ secrets.STAGING_DB_PASS }}
          STAGING_REMOTE_PATH: ${{ secrets.STAGING_REMOTE_PATH }}
          STAGING_URL: ${{ secrets.STAGING_URL }}

          PRODUCTION_DB_HOST: ${{ secrets.PRODUCTION_DB_HOST }}
          PRODUCTION_DB_NAME: ${{ secrets.PRODUCTION_DB_NAME }}
          PRODUCTION_DB_USER: ${{ secrets.PRODUCTION_DB_USER }}
          PRODUCTION_DB_PASS: ${{ secrets.PRODUCTION_DB_PASS }}
          PRODUCTION_REMOTE_PATH: ${{ secrets.PRODUCTION_REMOTE_PATH }}
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

          STAGING_SSH_USER: ${{ secrets.STAGING_SSH_USER }}
          STAGING_SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}

          PRODUCTION_SSH_USER: ${{ secrets.PRODUCTION_SSH_USER }}
          PRODUCTION_SSH_HOST: ${{ secrets.PRODUCTION_SSH_HOST }}
        run: |
          # Create config file for database sync
          cat > .db-sync-config << EOL
          # Database Sync Configuration

          # Local Database
          LOCAL_DB_HOST="${LOCAL_DB_HOST}"
          LOCAL_DB_NAME="${LOCAL_DB_NAME}"
          LOCAL_DB_USER="${LOCAL_DB_USER}"
          LOCAL_DB_PASS="${LOCAL_DB_PASS}"
          LOCAL_URL="${LOCAL_URL}"

          # Staging Database
          STAGING_DB_HOST="${STAGING_DB_HOST}"
          STAGING_DB_NAME="${STAGING_DB_NAME}"
          STAGING_DB_USER="${STAGING_DB_USER}"
          STAGING_DB_PASS="${STAGING_DB_PASS}" 
          STAGING_REMOTE_PATH="${STAGING_REMOTE_PATH}"
          STAGING_URL="${STAGING_URL}"

          # Production Database
          PRODUCTION_DB_HOST="${PRODUCTION_DB_HOST}"
          PRODUCTION_DB_NAME="${PRODUCTION_DB_NAME}"
          PRODUCTION_DB_USER="${PRODUCTION_DB_USER}"
          PRODUCTION_DB_PASS="${PRODUCTION_DB_PASS}"
          PRODUCTION_REMOTE_PATH="${PRODUCTION_REMOTE_PATH}"
          PRODUCTION_URL="${PRODUCTION_URL}"

          # SSH Connection Info
          STAGING_SSH_USER="${STAGING_SSH_USER}"
          STAGING_SSH_HOST="${STAGING_SSH_HOST}"

          PRODUCTION_SSH_USER="${PRODUCTION_SSH_USER}"
          PRODUCTION_SSH_HOST="${PRODUCTION_SSH_HOST}"

          # Backup Settings
          BACKUP_DIR="./backups"
          BACKUP_RETAIN_DAYS=30
          EOL

      - name: Create backups directory
        run: mkdir -p ./backups

      - name: Run database sync script
        run: |
          # Make scripts executable
          chmod +x scripts/db-sync.sh

          # Build command arguments
          ARGS="${{ github.event.inputs.action }} ${{ github.event.inputs.environment }}"

          if [ "${{ github.event.inputs.no_search_replace }}" == "true" ]; then
            ARGS="$ARGS --no-search-replace"
          fi

          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            ARGS="$ARGS --dry-run"
          fi

          # Run the sync script
          ./scripts/db-sync.sh $ARGS

      - name: Archive database backups
        uses: actions/upload-artifact@v2
        with:
          name: database-backups
          path: backups/*.sql.gz
          retention-days: 5

      - name: Send notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: Database Sync - ${{ github.event.inputs.action }} from ${{ github.event.inputs.environment }}
          SLACK_MESSAGE: ${{ job.status == 'success' && 'Database sync successful! :rocket:' || 'Database sync failed! :x:' }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
